// --- Program.cs (ajuste m√≠nimo) --------------------------------
using Lab11.Application.Handlers;
using Lab11.Application.Common;
using Lab11.Infrastructure.Context;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Hangfire;
using Hangfire.SqlServer;
using Lab11.Application.Services;           // üëà ya lo ten√≠as
using Lab11.Application.Services;           // (duplicado eliminado si exist√≠a)

var builder = WebApplication.CreateBuilder(args);

// ‚ñ∂ Servicios base
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddScoped<DataCleanupService>();

// ‚ñ∂ DbContext  ‚ùóÔ∏è‚Äî‚Äî‚Äî CAMBIO √öNICO ‚Äî‚Äî‚Äî‚ùóÔ∏è
// ‚õîÔ∏è COMENTA la l√≠nea InMemory:
//// builder.Services.AddDbContext<AppDbContext>(opt =>
////     opt.UseInMemoryDatabase("EmpresaDb"));

// ‚úÖ ACTIVA SQL Server (usa la misma cadena DefaultConnection de appsettings.json):
builder.Services.AddDbContext<AppDbContext>(opt =>
    opt.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// ‚ñ∂ MediatR
builder.Services.AddMediatR(typeof(AddEmpresaCommandHandler).Assembly);

// ‚ñ∂ Hangfire (sin cambios)
builder.Services.AddHangfire(c =>
    c.UseSqlServerStorage(builder.Configuration.GetConnectionString("DefaultConnection")));
builder.Services.AddHangfireServer();

// ‚ñ∂ Jobs (sin cambios)
builder.Services.AddScoped<NotificationService>();
builder.Services.AddScoped<UserCleanupService>();

var app = builder.Build();

// ‚ñ∂ Swagger s√≥lo en desarrollo
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// ‚ñ∂ Middleware
app.UseAuthorization();
app.MapControllers();
app.UseHangfireDashboard("/hangfire");

RecurringJob.AddOrUpdate<UserCleanupService>(
    "limpiar-usuarios-antiguos",
    x => x.CleanOldUsers(),
    Cron.Daily);

// ‚ñ∂ Jobs recurrentes
RecurringJob.AddOrUpdate<NotificationService>(
    "job-notificacion-diaria",
    s => s.SendNotification("usuario_diario"),
    Cron.Daily);

RecurringJob.AddOrUpdate<DataCleanupService>(
    "job-limpieza-empresas-antiguas",
    s => s.LimpiarEmpresasAntiguas(),
    Cron.Daily);

app.Run();
// ---------------------------------------------------------------
